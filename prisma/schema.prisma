generator client {
  provider = "cargo prisma"
  output   = "../src/prisma.rs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Skin {
  id        BigInt    @id @unique @default(autoincrement())
  hash      Bytes
  model     SkinType
  createdAt DateTime  @default(now())
  Profile   Profile[]
}

model Cape {
  id        BigInt    @id @unique @default(autoincrement())
  hash      Bytes
  createdAt DateTime  @default(now())
  Profile   Profile[]
}

model Profile {
  id                 BigInt             @id @unique @default(autoincrement())
  uuid               Bytes              @unique
  ownerID            BigInt
  displayName        String             @unique
  skinID             BigInt?
  capeID             BigInt?
  uploadableTextures UploadableTextures @default(SkinAndCape)
  createdAt          DateTime           @default(now())
  cape               Cape?              @relation(fields: [capeID], references: [id])
  owner              User               @relation(fields: [ownerID], references: [id])
  skin               Skin?              @relation(fields: [skinID], references: [id])
  Token              Token[]
}

model User {
  id        BigInt    @id @unique @default(autoincrement())
  uuid      Bytes     @unique
  nickname  String
  email     String    @unique
  password  String
  language  Language  @default(ZH_CN)
  createdAt DateTime  @default(now())
  Profile   Profile[]
  Setting   Setting?
  Token     Token[]
}

model Token {
  id          BigInt        @id @unique @default(autoincrement())
  accessToken String        @unique
  clientToken String
  ownerID     BigInt
  profileID   BigInt?
  createdAt   DateTime      @default(now())
  status      TokenStatus   @default(Available)
  JoinRequest JoinRequest[]
  owner       User          @relation(fields: [ownerID], references: [id])
  profile     Profile?      @relation(fields: [profileID], references: [id])
}

model JoinRequest {
  id          BigInt   @id @unique @default(autoincrement())
  serverID    String   @unique
  accessToken String
  ip          String
  createdAt   DateTime @default(now())
  token       Token    @relation(fields: [accessToken], references: [accessToken])
}

model Setting {
  id                       BigInt @id @unique @default(autoincrement())
  userId                   BigInt @unique
  maxToken                 BigInt @default(10)
  tokenNeedRefreshDuration BigInt @default(1296000)
  tokenInvalidDuration     BigInt @default(432000)
  user                     User   @relation(fields: [userId], references: [id])
}

enum UploadableTextures {
  SkinOnly
  SkinAndCape
  None
}

enum SkinType {
  Default
  Slim
}

enum Language {
  ZH_CN
  EN
}

enum TokenStatus {
  Available
  NeedRefresh
  Invalid
}
